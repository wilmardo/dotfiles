# Git

## Add submodule
gsuba() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: gsuba <giturl> <path>"
  else
    dirname=$(basename -s .git "${1}")
    git submodule add "${1}" "${2}/${dirname}"
    echo "${2}/${dirname} initialized"
  fi
}

## Delete submodule
gsubdel() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: gsubdel <path>"
  else
    git submodule deinit -f "${1}" && rm -rf ".git/modules/${1}" && git rm -f "${1}"
  fi
}

## Fix tracked ignore files (https://stackoverflow.com/questions/11451535/gitignore-is-ignored-by-git)
gfixignore() {
  require_clean_work_tree "gfixignore"
  git rm -r --cached .
  git add .
  git commit --signoff -m "fix: Untracked files removed from repository"
}

gauthorrewrite() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo 'Usage: gauthorrewrite --old_email=wilmaro@intermax.nl --new_email=w.denouden@intermax.nl --new_name="Wilmar den Ouden"'
  else
    while [ $# -gt 0 ]; do
        case "$1" in
            --old_email=*)
            export old_email="${1#*=}"
            ;;
            --new_email=*)
            export new_email="${1#*=}"
            ;;
            --new_name=*)
            export new_name="${1#*=}"
            ;;
        *)
        printf "***************************\n"
        printf "* Error: Invalid argument.*\n"
        printf "***************************\n"
        exit 1
        esac
        shift
    done

    git filter-branch --env-filter '
    if [ "$GIT_COMMITTER_EMAIL" = "$old_email" ]
    then
        export GIT_COMMITTER_NAME="$new_name"
        export GIT_COMMITTER_EMAIL="$new_email"
    fi
    if [ "$GIT_AUTHOR_EMAIL" = "$old_email" ]
    then
        export GIT_AUTHOR_NAME="$new_name"
        export GIT_AUTHOR_EMAIL="$new_email"
    fi
    ' --tag-name-filter cat -- --branches --tags
  fi
}

# Tools

## Extract archives (https://gist.github.com/aarohmankad/7c8122897bcfda2f57a67c5f84277fd5#file-extract_bash_function-sh)
extract() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ]; then
      cmd=$(get_extract_cmd "${1}")
      if ! [ -x $( command -v "${cmd}") ]; then
	echo "$cmd"
	echo "$( command -v "${cmd}")"
        echo "$1 - archive type not supported"
      else
        eval "${cmd}" "${1}"
      fi
    else
      echo "$1 - file does not exist"
    fi
  fi
}

## Create directory and drop to it
mkdircd() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: mkdircd <path>"
  else
    mkdir -pv "$@" && cd "$@" || return
  fi
}

## Backup dir/file
backup() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: backup <path>"
  else
    cp -r --preserve "$1"{,.bak}
  fi
}

## Search
whereis() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: whereis <filename>"
  else
    find . -name "$1*"
  fi
}

## Setup binary from url
install_bin() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: install_bin <url> <binary>"
  else
    # Set easy to use vars
    artifact=$(basename "${1}")
    cmd=$(get_extract_cmd "${1}")

    # Do all this in /tmp
    pushd /tmp > /dev/null || echo "No /tmp"
    # Download archive
    curl -LO "${1}"

    # Check if artifact is archive or binary direct
    if [[ $artifact != *"."* ]]; then
      # Direct binary
      echo "Binary directly downloaded"
      bin_path=${artifact}
    else
      # Extract archive
      echo "Extracting archive ${artifact}"
      archive_files=$(eval "${cmd} ${artifact}")
      # Remove archive
      echo "Removing archive ${artifact}"
      rm -f "${artifact}"
      # Find needed binary path, regex matches on last path so helm/helm matches but helm/README.md does not
      bin_path=$(echo $archive_files | grep -P ".*${2}$")
    fi

    # Make sure it is executable
    chmod +x "${bin_path}"
    # Move to location
    eval "sudo mv ${bin_path} /usr/local/bin/${2}"

    # Return to dir to no change parent shell to /tmp
    popd > /dev/null
  fi
}

## Remove user installed binary
uninstall_bin() {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: uninstall_bin <binary>"
  else
    sudo rm /usr/local/bin/${1}
  fi
}


## Remove sshkey from sshkey file
sshkey_remove() {
  if [ -z "$1" ]; then
     # display usage if no parameters given
     echo "Usage: sshkey_remove <ip/hostname/x.x.x.{0,10}>"
  else
    echo $1; echo $2
    if [[ $1 == *","* ]]; then
       # Templated var passed
       $range=$(echo $1 | grep -o "[0-9]*,[0-9]*")
       # https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
       seq=(${range//,/ })
       # https://stackoverflow.com/questions/169511/how-do-i-iterate-over-a-range-of-numbers-defined-by-variables-in-bash
       for i in $(seq $seq[0] $seq[1]); do echo $i; done
    else
      ssh-keygen -R $1
    fi
  fi
}

## base64 encode string instead of file
base64e() {
  if [ -z "$1" ]; then
     # display usage if no parameters given
     echo "Usage: base64e <string to encode>"
  else
    echo -n "$1" | base64
  fi
}

# Helpers
# Source: https://stackoverflow.com/a/3879077
require_clean_work_tree() {
  # Update the index
  git update-index -q --ignore-submodules --refresh
  err=0

  # Disallow unstaged changes in the working tree
  if ! git diff-files --quiet --ignore-submodules --; then
    echo >&2 "cannot $1: you have unstaged changes."
    git diff-files --name-status -r --ignore-submodules -- >&2
    err=1
  fi

  # Disallow uncommitted changes in the index
  if ! git diff-index --cached --quiet HEAD --ignore-submodules --; then
    echo >&2 "cannot $1: your index contains uncommitted changes."
    git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
    err=1
  fi

  if [ $err = 1 ]; then
    echo >&2 "Please commit or stash them."
  fi
}

get_extract_cmd() {
  case $1 in
  *.tar.bz2) echo tar xvjf ;;
  *.tar.gz) echo tar xvzf ;;
  *.tar.xz) echo tar xvJf ;;
  *.lzma) echo unlzma ;;
  *.bz2) echo bunzip2 ;;
  *.rar) echo unrar x -ad ;;
  *.gz) echo gunzip ;;
  *.tar) echo tar xvf ;;
  *.tbz2) echo tar xvjf ;;
  *.tgz) echo tar xvzf ;;
  *.zip) echo unzip ;;
  *.Z) echo uncompress ;;
  *.7z) echo 7z x ;;
  *.xz) echo unxz ;;
  *.exe) echo cabextract ;;
  *) echo "" ;;
  esac
}

# Ansible wrapper for the container parameters and multiline
ansible_docker_wrapper() {
  docker run -it \
    --user "$(id -u)":"$(id -g)" \
    --net=host \
    --volume "$PWD":/$(basename ~+) -w /$(basename ~+) \
    --volume "$HOME/.ssh/id_rsa":/home/user/.ssh/id_rsa \
    --volume "$HOME/.kube/config":/home/user/.kube/config \
    -e MOLECULE_EPHEMERAL_DIRECTORY=/$(basename ~+)/molecule/default/.molecule \
    lansible/ansible:2.15 "$@"
}
